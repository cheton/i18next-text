{"name":"I18next-text","tagline":"Using i18next translations without having the \"key\" as strings","body":"# i18next-text [![build status](https://travis-ci.org/cheton/i18next-text.svg?branch=master)](https://travis-ci.org/cheton/i18next-text)\r\n\r\n[![NPM](https://nodei.co/npm/i18next-text.png?downloads=true&stars=true)](https://nodei.co/npm/i18next-text/)\r\n\r\nUsing [i18next](http://i18next.com/) translations without having the `key` as strings, you do not need to worry about i18n key naming.\r\n\r\nIt's recommended to use [i18next-scanner](https://github.com/cheton/i18next-scanner) as a Grunt/Gulp task to scan your code, extract and merge translation keys and strings into i18n resource files.\r\n\r\nSave your time and work more efficiently!\r\n\r\n## Features\r\n* Supports most [i18next features](http://i18next.com/pages/doc_features.html).\r\n* Automatically generates a hash for an i18n text string as its unique key. It is not necessary to manually maintain resource files.\r\n* Supports CRC32, MD5, and SHA-1 hash (The default is SHA-1).\r\n* You can customize your own hash function by including the [i18next-text.custom.js](https://raw.githubusercontent.com/cheton/i18next-text/master/dist/i18next-text.custom.js) file with only 2KB in size.\r\n\r\n## Installation\r\n\r\n### Bower\r\n```\r\nbower install i18next-text\r\n```\r\n\r\n### NPM\r\n```\r\nnpm install i18next-text\r\n```\r\n\r\n## Initialization\r\nNormally [i18next-text](https://github.com/cheton/i18next-text/) can be initialized with options by calling i18nText.init():\r\n```javascript`\r\n// omit this step if using default options\r\ni18nText.init({\r\n    debug: true, // default: false\r\n    hash: 'sha1' // default: 'sha1'\r\n});\r\n```\r\n\r\nThen extends i18n object to provide a new _() method:\r\n```javascript\r\ni18n._ = i18nText._;\r\n```\r\n\r\nInitializes i18next with options:\r\n```javascript\r\ni18n.init({lng: 'en'});\r\n\r\n// later\r\ni18n.t('key');\r\ni18n._('It\\'s no longer needed by specifying the key.');\r\n```\r\n\r\nInitializes i18next with both options and callback:\r\n```javascript\r\ni18n.init({lng: 'en'}, function(t) {\r\n    i18n.t('key');\r\n    i18n._('It\\'s no longer needed by specifying the key.');\r\n});\r\n```\r\n\r\n## Usage\r\n\r\nFor example, assume that you have the following directory structure:\r\n```\r\nindex.html\r\nvendor/\r\n    i18next.js\r\n    i18next-text.js\r\ni18n/\r\n    en/\r\n        resource.json\r\n    de/\r\n        resource.json\r\n```\r\n\r\nEnglish resource file (i18n/en/resource.json):\r\n```json\r\n{\r\n    \"loading\": \"Loading...\",\r\n    \"b04ba49f848624bb97ab094a2631d2ad74913498\": \"Loading...\"\r\n}\r\n```\r\n\r\nGerman resource file (i18n/de/resource.json):\r\n```json\r\n{\r\n    \"loading\": \"Wird geladen...\",\r\n    \"b04ba49f848624bb97ab094a2631d2ad74913498\": \"Wird geladen...\"\r\n}\r\n```\r\n\r\nAll SHA-1 keys are automatically generated using [i18next-scanner](https://github.com/cheton/i18next-scanner). You do not need to maintain resource files.\r\n\r\n### In Node.js\r\n```javascript\r\nvar i18n = require('i18next');\r\n\r\n// extends i18n object to provide a new _() method\r\ni18n._ = require('i18next-text')._;\r\n\r\ni18n.init({/* options */}, function() {\r\n    // Current language is English\r\n    i18n.t('loading'); // will return \"Loading...\"\r\n\r\n    // Change language to German\r\n    i18n.setLng('de');\r\n\r\n    i18n._('Loading...'); // will return \"Wird geladen...\"\r\n});\r\n```\r\n\r\n### Browser globals\r\n```html\r\n<script src=\"vendor/i18next.js\"></script>\r\n<script src=\"vendor/i18next-text.js\"></script>\r\n<script>\r\n// extends i18n object to provide a new _() method\r\ni18n._ = i18nText._;\r\n\r\ni18n.init({/* options */}, function() {\r\n    // Current language is English\r\n    i18n.t('loading'); // will return \"Loading...\"\r\n    \r\n    // Change language to German\r\n    i18n.setLng('de');\r\n    i18n._('Loading...'); // will return \"Wird geladen...\"\r\n});\r\n</script>\r\n```\r\n\r\n### Translation features\r\n\r\n[i18next-text](https://github.com/cheton/i18next-text/) supports most [i18next features](http://i18next.com/pages/doc_features.html), for example:\r\n\r\n* Access value in different language:\r\n    ```javascript\r\n    i18n._('Loading...', {lng: 'de'}); // will get value in de instead of en\r\n    ```\r\n\r\n* Replacing variables:\r\n    ```javascript\r\n    i18n._('YouTube has more than __count__ billion users.', {count: 1});\r\n    ```\r\n\r\nVisit [http://i18next.com/pages/doc_features.html](http://i18next.com/pages/doc_features.html) to see more examples.\r\n\r\n## Advanced Usage\r\n\r\n### Providing a default key\r\nYou may want to explicitly specify a default key of a text string:\r\n```javascript\r\ni18n._('Loading...', {defaultKey: 'loading'});\r\ni18n._('Loading...', {defaultKey: 'b04ba49f848624bb97ab094a2631d2ad74913498'});\r\n```\r\n\r\nYou can send missing resources to server by turning on i18next's sendMissing option:\r\n```javascript\r\ni18n.init({sendMissing: true});\r\n```\r\n\r\n### Custom hash function \r\nTo apply a custom hash function, you can change `hash` on i18nText.init as needed:\r\n```javascript\r\ni18nText.init({\r\n    hash: function(str) {\r\n        return customHashFunction(str);\r\n    }\r\n});\r\n```\r\n\r\n## License\r\n\r\nCopyright (c) 2015 Cheton Wu\r\n\r\nLicensed under the [MIT License](https://github.com/cheton/i18next-text/blob/master/LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}