{"name":"I18next-text","tagline":"Using i18next translations without having the \"key\" as strings","body":"# i18next-text [![build status](https://travis-ci.org/cheton/i18next-text.svg?branch=master)](https://travis-ci.org/cheton/i18next-text) [![Coverage Status](https://coveralls.io/repos/cheton/i18next-text/badge.svg)](https://coveralls.io/r/cheton/i18next-text)\r\n\r\n[![NPM](https://nodei.co/npm/i18next-text.png?downloads=true&stars=true)](https://nodei.co/npm/i18next-text/)\r\n\r\nUsing [i18next](http://i18next.com/) translations without having the `key` as strings, you do not need to worry about i18n key naming.\r\n\r\nIt's recommended to use [i18next-scanner](https://github.com/cheton/i18next-scanner) as a Grunt/Gulp task to scan your code, extract and merge translation keys and strings into i18n resource files.\r\n\r\n```javascript\r\ni18n._('Save your time and work more efficiently.');\r\n```\r\n**[Check out our demo](http://jsfiddle.net/cheton/fo8Lgact/)** on JSFiddle.\r\n\r\n## Features\r\n* Supports most [i18next features](http://i18next.com/pages/doc_features.html).\r\n* Provides built-in support for [Handlebars i18n helper](https://github.com/cheton/i18next-text/tree/master#handlebars-i18n-helper).\r\n* Automatically generates a hash for an i18n text string as its unique key. It is not necessary to manually maintain resource files.\r\n* Supports CRC32, MD5, and SHA-1 hash (The default is SHA-1).\r\n* You can customize your own hash function by including the [i18next-text.custom.js](https://raw.githubusercontent.com/cheton/i18next-text/master/dist/i18next-text.custom.js) file with only 2KB in size.\r\n\r\n## Installation\r\n\r\nWith [bower](http://bower.io/):\r\n```\r\nbower install i18next-text\r\n```\r\n\r\nWith [npm](https://npmjs.org/):\r\n```\r\nnpm install i18next-text\r\n```\r\n\r\n## Initialization\r\nNormally [i18next-text](https://github.com/cheton/i18next-text/) can be initialized with options by calling i18nText.init():\r\n```javascript`\r\n// You can omit this step if using default options\r\ni18nText.init({\r\n    debug: true, // default: false\r\n    hash: 'sha1' // default: 'sha1'\r\n});\r\n```\r\n\r\nThen extends i18n object to provide a new _() method:\r\n```javascript\r\ni18n._ = i18nText._;\r\n```\r\n\r\nInitializes i18next with options:\r\n```javascript\r\ni18n.init({lng: 'en'});\r\n\r\n// later\r\ni18n.t('key');\r\ni18n._('It is no longer needed by specifying the key.');\r\n```\r\n\r\nor initializes i18next with both options and callback:\r\n```javascript\r\ni18n.init({lng: 'en'}, function(t) {\r\n    i18n.t('key');\r\n    i18n._('It is no longer needed by specifying the key.');\r\n});\r\n```\r\n\r\n## Usage\r\n\r\nFor example, assume that you have the following directory structure:\r\n```\r\nindex.html\r\nvendor/\r\n    i18next.js\r\n    i18next-text.js\r\ni18n/\r\n    en/\r\n        resource.json\r\n    de/\r\n        resource.json\r\n```\r\n\r\nindex.html\r\n```html\r\n<!doctype html>\r\n<html class=\"no-js\" lang=\"\">\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    </head>\r\n    <body>\r\n        <script src=\"vendor/i18next.js\"></script>\r\n        <script src=\"vendor/i18next-text.js\"></script>\r\n        <script>\r\n            // See \"Browser globals\" below for example\r\n        </script>\r\n    </body>\r\n</html>\r\n```\r\n\r\nEnglish resource file (i18n/en/resource.json):\r\n```json\r\n{\r\n    \"loading\": \"Loading...\",\r\n    \"b04ba49f848624bb97ab094a2631d2ad74913498\": \"Loading...\"\r\n}\r\n```\r\n\r\nGerman resource file (i18n/de/resource.json):\r\n```json\r\n{\r\n    \"loading\": \"Wird geladen...\",\r\n    \"b04ba49f848624bb97ab094a2631d2ad74913498\": \"Wird geladen...\"\r\n}\r\n```\r\n\r\nAll SHA-1 keys are automatically generated using [i18next-scanner](https://github.com/cheton/i18next-scanner). You do not need to maintain resource files.\r\n\r\n### In Node.js\r\n```javascript\r\nvar i18n = require('i18next');\r\nvar i18nText = require('i18next-text');\r\nvar options = {\r\n    lng: 'en',\r\n    preload: ['en', 'de'],\r\n    load: 'current',\r\n    fallbackLng: false,\r\n    resGetPath: 'i18n/__lng__/__ns__.json',\r\n    ns: {\r\n        namespaces: [\r\n            'resource' // default\r\n        ],\r\n        defaultNs: 'resource'\r\n    }\r\n};\r\n\r\n// extends i18n object to provide a new _() method\r\ni18n._ = i18nText._;\r\n\r\ni18n.init(options, function() {\r\n    i18n.t('loading'); // will return \"Loading...\"\r\n    i18n._('Loading...', {lng: 'de'}); // will return \"Wird geladen...\"\r\n});\r\n```\r\n\r\n### Browser globals\r\n```javascript\r\n(function(root) {\r\n    var i18n = root.i18n;\r\n    var i18nText = root.i18nText;\r\n    var options = {\r\n        lng: 'en',\r\n        preload: ['en', 'de'],\r\n        load: 'current',\r\n        fallbackLng: false,\r\n        resGetPath: 'i18n/__lng__/__ns__.json',\r\n        ns: {\r\n            namespaces: [\r\n                'resource' // default\r\n            ],\r\n            defaultNs: 'resource'\r\n        }\r\n    };\r\n\r\n    // extends i18n object to provide a new _() method\r\n    i18n._ = i18nText._;\r\n\r\n    i18n.init(options, function() {\r\n        i18n.t('loading'); // will return \"Loading...\"\r\n        i18n._('Loading...', {lng: 'de'}); // will return \"Wird geladen...\"\r\n    });\r\n}(this));\r\n```\r\n\r\n### Translation features\r\n\r\n[i18next-text](https://github.com/cheton/i18next-text/) supports most [i18next features](http://i18next.com/pages/doc_features.html), for example:\r\n\r\n* Access value in different language:\r\n    ```javascript\r\n    i18n._('Loading...', {lng: 'de'}); // will get value in de instead of en\r\n    ```\r\n\r\n* Replacing variables:\r\n    ```javascript\r\n    i18n._('YouTube has more than __count__ billion users.', {count: 1});\r\n    ```\r\n\r\nVisit [http://i18next.com/pages/doc_features.html](http://i18next.com/pages/doc_features.html) to see more examples.\r\n\r\n## Advanced Usage\r\n\r\n### Gets the hashed key with a given string\r\nYou can call the key() function to get the hashed key with a given string:\r\n```javascript\r\nvar i18nText = require('i18next-text');\r\ni18nText.key('Loading...'); // will return a hash string\r\n```\r\n\r\n### Checks if a string exists\r\n```javascript\r\nvar i18nText = require('i18next-text');\r\ni18nText.exists('Loading...'); // will return a boolean value\r\n```\r\n\r\n### Providing a default key\r\nYou can explicitly specify a default key of a text string by passing a `defaultKey` option:\r\n```javascript\r\ni18n._('Loading...', {defaultKey: 'loading'});\r\ni18n._('Loading...', {defaultKey: 'b04ba49f848624bb97ab094a2631d2ad74913498'});\r\n```\r\n\r\nNote. Missing resources can be sent to server by turning on i18next's sendMissing option like below:\r\n```javascript\r\ni18n.init({sendMissing: true});\r\n```\r\n\r\n### Custom hash function \r\nYou can customize your own hash function by including the [i18next-text.custom.js](https://raw.githubusercontent.com/cheton/i18next-text/master/dist/i18next-text.custom.js) file, which is only 2KB in size:\r\n```html\r\n<script src=\"vendor/i18next.js\"></script>\r\n<script src=\"vendor/i18next-text.custom.js\"></script>\r\n```\r\n\r\nIn your initialization script, change `hash` on i18nText.init() to apply a custom hash function:\r\n```javascript\r\ni18nText.init({\r\n    hash: function(str) {\r\n        return customHashFunction(str);\r\n    }\r\n});\r\n```\r\n\r\n## Template & Helpers\r\n\r\n### Handlebars i18n helper\r\n\r\ni18next-text provides built-in support for Handlebars helper. You can register the `i18n` helper for use in templates.\r\n\r\n#### Register helper\r\nUse the `Handlebars.registerHelper` method to register the `i18n` helper:\r\n```javascript\r\nvar i18nText = require('i18next-text');\r\nvar handlebars = require('handlebars');\r\n\r\nhandlebars.registerHelper('i18n', i18nText.handlebarsHelper);\r\n```\r\n\r\n\r\nBy default, Handlebars will escape the returned result by default.\r\nIf you want to generate HTML, you have to return a `new Handlebars.SafeString(result)` like  so:\r\n```javascript\r\nvar i18nText = require('i18next-text');\r\nvar handlebars = require('handlebars');\r\n\r\nhandlebars.registerHelper('i18n', function() {\r\n    var result = i18nText.handlebarsHelper.apply(this, arguments);\r\n    return new handlebars.SafeString(result);\r\n});\r\n```\r\nIn such a circumstance, you will want to manually escape parameters.\r\n\r\n#### Usage\r\nHere is an example of what our template file might look like:\r\n```html\r\n{{i18n 'Basic Example'}}\r\n{{i18n '__first-name__ __last-name__' first-name=firstname last-name=lastname}}\r\n{{i18n 'English' defaultKey='locale:language.en-US'}}\r\n{{i18n defaultKey='loading'}}\r\n{{#i18n}}Some text{{/i18n}}\r\n{{#i18n this}}Description: {{description}}{{/i18n}}\r\n{{#i18n this last-name=lastname}}{{firstname}} __last-name__{{/i18n}}\r\n```\r\n\r\nYou can compile the template string into a Handlebars template function, and then render the template by passing a data object (a.k.a. context) into that function:\r\n```javascript\r\nvar source = fs.readFileSync('./handlebars-helper-i18n.hbs'), 'utf-8');\r\nvar template = handlebars.compile(source);\r\nvar context = {\r\n    'firstname':'Foo',\r\n    'lastname':'Bar',\r\n    'description': 'Foo Bar Test'\r\n};\r\nconsole.log(template(context));\r\n```\r\n\r\nYou will see console output like so:\r\n```\r\nBasic Example\r\nFoo Bar\r\nEnglish\r\nLoading...\r\nSome text\r\nDescription: Foo Bar Test\r\nFoo Bar\r\n```\r\n\r\n## License\r\n\r\nCopyright (c) 2015 Cheton Wu\r\n\r\nLicensed under the [MIT License](https://github.com/cheton/i18next-text/blob/master/LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}